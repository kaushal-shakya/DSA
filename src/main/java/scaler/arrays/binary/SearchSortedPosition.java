package scaler.arrays.binary;

public class SearchSortedPosition {
    public static void main(String[] args) {
//        int[] A = { 1, 3, 5, 6 };
//        int B = 7;

//        int[] A = { 1, 4, 9 };
//        int B = 3;

//        int[] A = {3, 4, 18, 19, 20, 27, 28, 31, 36, 42, 44, 71, 72, 75, 82, 86, 88, 97, 100, 103, 105, 107, 110, 116, 118, 119, 121, 122, 140, 141, 142, 155, 157,
//                166, 176, 184, 190, 199, 201, 210, 212, 220, 225, 234, 235, 236, 238, 244, 259, 265, 266, 280, 283, 285, 293, 299, 309, 312, 317, 335, 341, 352, 354,
//                360, 365, 368, 370, 379, 386, 391, 400, 405, 410, 414, 416, 428, 433, 437, 438, 445, 453, 457, 458, 472, 476, 480, 485, 489, 491, 493, 501, 502, 505,
//                510, 511, 520, 526, 535, 557, 574, 593, 595, 604, 605, 612, 629, 632, 633, 634, 642, 647, 653, 654, 656, 658, 686, 689, 690, 691, 709, 716, 717, 737,
//                738, 746, 759, 765, 775, 778, 783, 786, 787, 791, 797, 801, 806, 815, 820, 822, 823, 832, 839, 841, 847, 859, 873, 877, 880, 886, 904, 909, 911, 917,
//                919, 937, 946, 948, 951, 961, 971, 979, 980, 986, 993 };
//        int B = 902;

//        int[] A = {2,5,7,10,11,15};
//        int B = 14;

        int[] A = {3, 4, 6, 7, 8, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 38, 39, 40, 42, 46, 49, 53, 54, 55, 59, 61, 64, 66, 69, 76, 77, 80, 83, 93, 94, 95, 96, 98, 101, 102, 103,
                105, 108, 110, 112, 114, 115, 117, 119, 121, 122, 125, 126, 127, 131, 134, 136, 137, 139, 142, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 160, 161, 163,
                166, 172, 173, 174, 175, 178, 179, 184, 186, 187, 189, 190, 195, 196, 197, 198, 200, 202, 204, 207, 208, 209, 211, 212, 215, 218, 219, 223, 230, 235, 236, 237, 238,
                239, 241, 242, 244, 246, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 267, 268, 271, 273, 275, 276, 278, 281, 284, 287, 288, 289, 294, 296, 299, 301, 304, 307,
                309, 311, 314, 317, 318, 322, 325, 327, 331, 333, 334, 335, 339, 340, 342, 344, 345, 347, 348, 349, 352, 353, 354, 355, 357, 359, 361, 364, 365, 368, 374, 376, 378,
                381, 383, 385, 386, 391, 393, 402, 408, 409, 410, 412, 415, 416, 419, 420, 421, 424, 426, 427, 429, 430, 433, 436, 437, 439, 441, 442, 444, 445, 452, 453, 456, 457,
                458, 462, 466, 467, 468, 470, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 487, 488, 489, 497, 500, 501, 503, 504, 505, 507, 509, 510, 514, 515, 517, 518,
                520, 521, 522, 523, 524, 525, 526, 531, 532, 534, 538, 539, 543, 544, 546, 548, 550, 554, 556, 557, 558, 559, 564, 567, 568, 569, 571, 574, 577, 580, 582, 583, 584,
                591, 592, 593, 595, 597, 598, 600, 604, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 623, 625, 634, 636, 637, 640, 643, 644, 646, 647, 650, 651, 656,
                658, 659, 660, 662, 665, 666, 668, 672, 674, 678, 680, 684, 685, 688, 689, 690, 692, 694, 697, 701, 702, 705, 706, 709, 711, 712, 716, 719, 721, 727, 728, 730, 732,
                734, 735, 736, 737, 740, 742, 743, 746, 747, 752, 754, 755, 757, 759, 761, 764, 765, 767, 769, 771, 772, 774, 775, 777, 778, 779, 780, 781, 784, 787, 792, 793, 797,
                799, 800, 801, 803, 806, 807, 810, 813, 815, 823, 824, 827, 828, 830, 831, 832, 833, 834, 838, 841, 843, 847, 848, 849, 853, 854, 855, 856, 858, 861, 863, 865, 867,
                868, 869, 870, 872, 874, 876, 877, 878, 879, 885, 888, 891, 894, 895, 896, 897, 899, 901, 903, 904, 907, 908, 909, 910, 912, 913, 914, 916, 917, 919, 920, 921, 923,
                928, 929, 930, 934, 936, 939, 940, 942, 943, 946, 947, 950, 955, 958, 961, 964, 966, 967, 970, 971, 973, 976, 977, 979, 984, 988, 989, 993, 995, 996, 998, 1000 } ;
        int B = 624;

        System.out.println(binarySearchModified(A, B, 0,A.length-1));
    }

    public static int binarySearchModified(int[] A, int target, int start, int end)
    {
        while(start <= end)
        {
            int mid = start + (end-start)/2;
            if(A[mid] == target)
            {
                return mid;
            } else if(A[mid] > target)
            {
                end = mid-1;
            }else{
                start = mid + 1;
            }
        }
        return start;
    }
}
