Modular Arithmetic   |
----------------------
Why modulo needed ?
to limit range

2^10 = 1024 â‰ˆ 10^3.

Properties:
1. Addition =>
    ( a + b ) % m = ( a % m + b % m ) % m
    ( a + m ) % m = a % m

2. Multiplication
    ( a * b ) % m = (( a % m ) * (b % m )) % m

3. Subtraction ( special )
    ( a - b ) % m = ( ( a % m ) - ( b % m ) + m ) % m

4. Reminder
    a % m = ((( a % m ) % m ) % m ) % m

5. Exponentiation
    a^b % m = (( a % m )^b ) % m

-----------------------------
|        Bit Manipulation   |
-----------------------------

Common Bitwise Patterns:

1. Checking if a bit is set: (num >> i) & 1 or num & (1 << i)
2. Setting a bit: num | (1 << i)
3. Clearing a bit: num & ~(1 << i)
4. Toggling a bit: num ^ (1 << i)
5. Checking if a number is a power of 2: (num & (num - 1)) == 0 (for num > 0)
6. Counting set bits: Various algorithms (Brian Kernighan's algorithm is efficient).
7. Getting the rightmost set bit: num & (-num)

Number of set bits in its binary representation (also known as the Hamming weight).

_________________
|     Stacks    |
-----------------

LIFO
push
pop ===> remove & return => r & r
peek ===> return

Where could be used ?
reversing
__________________
Monotonic Stack   |
------------------
Monotonic stack is a data structure that maintains a sequence of elements in a strictly sorted order, either increasing or
decreasing.
It is variation of a regular stack where elements are pushed and popped in a way that preserves this monotonic property.

The two types are:

1. Monotonically Increasing Stack:
Elements from bottom to top are always in increasing order (e.g., [1, 5, 8, 12]).
New element will always be greater than current top element.
Pushing a new element, pop all elements from the top that are greater than or equal to the new element before
pushing it.

2. Monotonically Decreasing Stack:
Elements from bottom to top are always in decreasing order (e.g., [20, 15, 10, 2]).
New element will always be smaller than current top element.
pushing new element => pop all elements from the top that are less than or equal to the new element before pushing it.



